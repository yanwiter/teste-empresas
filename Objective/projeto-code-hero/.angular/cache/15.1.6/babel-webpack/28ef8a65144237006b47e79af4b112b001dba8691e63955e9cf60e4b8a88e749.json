{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Directive, Component, ViewEncapsulation, ChangeDetectionStrategy, Input, NgModule } from '@angular/core';\nimport * as i1 from '@angular/cdk/table';\nimport { CdkTable, CDK_TABLE, _COALESCED_STYLE_SCHEDULER, _CoalescedStyleScheduler, STICKY_POSITIONING_LISTENER, CDK_TABLE_TEMPLATE, CdkCellDef, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkHeaderCell, CdkFooterCell, CdkCell, CdkHeaderRowDef, CdkFooterRowDef, CdkRowDef, CdkHeaderRow, CDK_ROW_TEMPLATE, CdkFooterRow, CdkRow, CdkNoDataRow, CdkTextColumn, CdkTableModule } from '@angular/cdk/table';\nimport { _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy, _DisposeViewRepeaterStrategy } from '@angular/cdk/collections';\nimport { MatCommonModule } from '@angular/material/core';\nimport { _MatTableDataSource } from '@angular/material/table';\nconst _c0 = [[[\"caption\"]], [[\"colgroup\"], [\"col\"]]];\nconst _c1 = [\"caption\", \"colgroup, col\"];\nfunction MatLegacyTextColumn_th_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 3);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"text-align\", ctx_r0.justify);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.headerText, \" \");\n  }\n}\nfunction MatLegacyTextColumn_td_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 4);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const data_r2 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"text-align\", ctx_r1.justify);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.dataAccessor(data_r2, ctx_r1.name), \" \");\n  }\n}\nexport { _MatTableDataSource as _MatLegacyTableDataSource } from '@angular/material/table';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Enables the recycle view repeater strategy, which reduces rendering latency. Not compatible with\n * tables that animate rows.\n * @deprecated Use `MatRecycleRows` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nlet MatLegacyRecycleRows = /*#__PURE__*/(() => {\n  class MatLegacyRecycleRows {}\n  MatLegacyRecycleRows.ɵfac = function MatLegacyRecycleRows_Factory(t) {\n    return new (t || MatLegacyRecycleRows)();\n  };\n  MatLegacyRecycleRows.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatLegacyRecycleRows,\n    selectors: [[\"mat-table\", \"recycleRows\", \"\"], [\"table\", \"mat-table\", \"\", \"recycleRows\", \"\"]],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: _VIEW_REPEATER_STRATEGY,\n      useClass: _RecycleViewRepeaterStrategy\n    }])]\n  });\n  return MatLegacyRecycleRows;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Wrapper for the CdkTable with Material design styles.\n * @deprecated Use `MatTable` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nlet MatLegacyTable = /*#__PURE__*/(() => {\n  class MatLegacyTable extends CdkTable {\n    constructor() {\n      super(...arguments);\n      /** Overrides the sticky CSS class set by the `CdkTable`. */\n      this.stickyCssClass = 'mat-table-sticky';\n      /** Overrides the need to add position: sticky on every sticky cell element in `CdkTable`. */\n      this.needsPositionStickyOnElement = false;\n    }\n  }\n  MatLegacyTable.ɵfac = /* @__PURE__ */function () {\n    let ɵMatLegacyTable_BaseFactory;\n    return function MatLegacyTable_Factory(t) {\n      return (ɵMatLegacyTable_BaseFactory || (ɵMatLegacyTable_BaseFactory = i0.ɵɵgetInheritedFactory(MatLegacyTable)))(t || MatLegacyTable);\n    };\n  }();\n  MatLegacyTable.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatLegacyTable,\n    selectors: [[\"mat-table\"], [\"table\", \"mat-table\", \"\"]],\n    hostAttrs: [1, \"mat-table\"],\n    hostVars: 2,\n    hostBindings: function MatLegacyTable_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"mat-table-fixed-layout\", ctx.fixedLayout);\n      }\n    },\n    exportAs: [\"matTable\"],\n    features: [i0.ɵɵProvidersFeature([\n    // TODO(michaeljamesparsons) Abstract the view repeater strategy to a directive API so this code\n    //  is only included in the build if used.\n    {\n      provide: _VIEW_REPEATER_STRATEGY,\n      useClass: _DisposeViewRepeaterStrategy\n    }, {\n      provide: CdkTable,\n      useExisting: MatLegacyTable\n    }, {\n      provide: CDK_TABLE,\n      useExisting: MatLegacyTable\n    }, {\n      provide: _COALESCED_STYLE_SCHEDULER,\n      useClass: _CoalescedStyleScheduler\n    },\n    // Prevent nested tables from seeing this table's StickyPositioningListener.\n    {\n      provide: STICKY_POSITIONING_LISTENER,\n      useValue: null\n    }]), i0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 6,\n    vars: 0,\n    consts: [[\"headerRowOutlet\", \"\"], [\"rowOutlet\", \"\"], [\"noDataRowOutlet\", \"\"], [\"footerRowOutlet\", \"\"]],\n    template: function MatLegacyTable_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef(_c0);\n        i0.ɵɵprojection(0);\n        i0.ɵɵprojection(1, 1);\n        i0.ɵɵelementContainer(2, 0)(3, 1)(4, 2)(5, 3);\n      }\n    },\n    dependencies: [i1.DataRowOutlet, i1.HeaderRowOutlet, i1.FooterRowOutlet, i1.NoDataRowOutlet],\n    styles: [\"mat-table{display:block}mat-header-row{min-height:56px}mat-row,mat-footer-row{min-height:48px}mat-row,mat-header-row,mat-footer-row{display:flex;border-width:0;border-bottom-width:1px;border-style:solid;align-items:center;box-sizing:border-box}mat-cell:first-of-type,mat-header-cell:first-of-type,mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] mat-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}mat-cell:last-of-type,mat-header-cell:last-of-type,mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] mat-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}mat-cell,mat-header-cell,mat-footer-cell{flex:1;display:flex;align-items:center;overflow:hidden;word-wrap:break-word;min-height:inherit}table.mat-table{border-spacing:0}tr.mat-header-row{height:56px}tr.mat-row,tr.mat-footer-row{height:48px}th.mat-header-cell{text-align:left}[dir=rtl] th.mat-header-cell{text-align:right}th.mat-header-cell,td.mat-cell,td.mat-footer-cell{padding:0;border-bottom-width:1px;border-bottom-style:solid}th.mat-header-cell:first-of-type,td.mat-cell:first-of-type,td.mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] th.mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] td.mat-cell:first-of-type:not(:only-of-type),[dir=rtl] td.mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}th.mat-header-cell:last-of-type,td.mat-cell:last-of-type,td.mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] th.mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] td.mat-cell:last-of-type:not(:only-of-type),[dir=rtl] td.mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}.mat-table-sticky{position:sticky !important}.mat-table-fixed-layout{table-layout:fixed}\"],\n    encapsulation: 2\n  });\n  return MatLegacyTable;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n * @deprecated Use `MatCellDef` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nlet MatLegacyCellDef = /*#__PURE__*/(() => {\n  class MatLegacyCellDef extends CdkCellDef {}\n  MatLegacyCellDef.ɵfac = /* @__PURE__ */function () {\n    let ɵMatLegacyCellDef_BaseFactory;\n    return function MatLegacyCellDef_Factory(t) {\n      return (ɵMatLegacyCellDef_BaseFactory || (ɵMatLegacyCellDef_BaseFactory = i0.ɵɵgetInheritedFactory(MatLegacyCellDef)))(t || MatLegacyCellDef);\n    };\n  }();\n  MatLegacyCellDef.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatLegacyCellDef,\n    selectors: [[\"\", \"matCellDef\", \"\"]],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkCellDef,\n      useExisting: MatLegacyCellDef\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n  return MatLegacyCellDef;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n * @deprecated Use `MatHeaderCellDef` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nlet MatLegacyHeaderCellDef = /*#__PURE__*/(() => {\n  class MatLegacyHeaderCellDef extends CdkHeaderCellDef {}\n  MatLegacyHeaderCellDef.ɵfac = /* @__PURE__ */function () {\n    let ɵMatLegacyHeaderCellDef_BaseFactory;\n    return function MatLegacyHeaderCellDef_Factory(t) {\n      return (ɵMatLegacyHeaderCellDef_BaseFactory || (ɵMatLegacyHeaderCellDef_BaseFactory = i0.ɵɵgetInheritedFactory(MatLegacyHeaderCellDef)))(t || MatLegacyHeaderCellDef);\n    };\n  }();\n  MatLegacyHeaderCellDef.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatLegacyHeaderCellDef,\n    selectors: [[\"\", \"matHeaderCellDef\", \"\"]],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkHeaderCellDef,\n      useExisting: MatLegacyHeaderCellDef\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n  return MatLegacyHeaderCellDef;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n * @deprecated Use `MatFooterCellDef` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nlet MatLegacyFooterCellDef = /*#__PURE__*/(() => {\n  class MatLegacyFooterCellDef extends CdkFooterCellDef {}\n  MatLegacyFooterCellDef.ɵfac = /* @__PURE__ */function () {\n    let ɵMatLegacyFooterCellDef_BaseFactory;\n    return function MatLegacyFooterCellDef_Factory(t) {\n      return (ɵMatLegacyFooterCellDef_BaseFactory || (ɵMatLegacyFooterCellDef_BaseFactory = i0.ɵɵgetInheritedFactory(MatLegacyFooterCellDef)))(t || MatLegacyFooterCellDef);\n    };\n  }();\n  MatLegacyFooterCellDef.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatLegacyFooterCellDef,\n    selectors: [[\"\", \"matFooterCellDef\", \"\"]],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkFooterCellDef,\n      useExisting: MatLegacyFooterCellDef\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n  return MatLegacyFooterCellDef;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n * @deprecated Use `MatColumnDef` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nlet MatLegacyColumnDef = /*#__PURE__*/(() => {\n  class MatLegacyColumnDef extends CdkColumnDef {\n    /** Unique name for this column. */\n    get name() {\n      return this._name;\n    }\n    set name(name) {\n      this._setNameInput(name);\n    }\n    /**\n     * Add \"mat-column-\" prefix in addition to \"cdk-column-\" prefix.\n     * In the future, this will only add \"mat-column-\" and columnCssClassName\n     * will change from type string[] to string.\n     * @docs-private\n     */\n    _updateColumnCssClassName() {\n      super._updateColumnCssClassName();\n      this._columnCssClassName.push(`mat-column-${this.cssClassFriendlyName}`);\n    }\n  }\n  MatLegacyColumnDef.ɵfac = /* @__PURE__ */function () {\n    let ɵMatLegacyColumnDef_BaseFactory;\n    return function MatLegacyColumnDef_Factory(t) {\n      return (ɵMatLegacyColumnDef_BaseFactory || (ɵMatLegacyColumnDef_BaseFactory = i0.ɵɵgetInheritedFactory(MatLegacyColumnDef)))(t || MatLegacyColumnDef);\n    };\n  }();\n  MatLegacyColumnDef.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatLegacyColumnDef,\n    selectors: [[\"\", \"matColumnDef\", \"\"]],\n    inputs: {\n      sticky: \"sticky\",\n      name: [\"matColumnDef\", \"name\"]\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkColumnDef,\n      useExisting: MatLegacyColumnDef\n    }, {\n      provide: 'MAT_SORT_HEADER_COLUMN_DEF',\n      useExisting: MatLegacyColumnDef\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n  return MatLegacyColumnDef;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Header cell template container that adds the right classes and role.\n * @deprecated Use `MatHeaderCell` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nlet MatLegacyHeaderCell = /*#__PURE__*/(() => {\n  class MatLegacyHeaderCell extends CdkHeaderCell {}\n  MatLegacyHeaderCell.ɵfac = /* @__PURE__ */function () {\n    let ɵMatLegacyHeaderCell_BaseFactory;\n    return function MatLegacyHeaderCell_Factory(t) {\n      return (ɵMatLegacyHeaderCell_BaseFactory || (ɵMatLegacyHeaderCell_BaseFactory = i0.ɵɵgetInheritedFactory(MatLegacyHeaderCell)))(t || MatLegacyHeaderCell);\n    };\n  }();\n  MatLegacyHeaderCell.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatLegacyHeaderCell,\n    selectors: [[\"mat-header-cell\"], [\"th\", \"mat-header-cell\", \"\"]],\n    hostAttrs: [\"role\", \"columnheader\", 1, \"mat-header-cell\"],\n    features: [i0.ɵɵInheritDefinitionFeature]\n  });\n  return MatLegacyHeaderCell;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Footer cell template container that adds the right classes and role.\n * @deprecated Use `MatFooterCell` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nlet MatLegacyFooterCell = /*#__PURE__*/(() => {\n  class MatLegacyFooterCell extends CdkFooterCell {}\n  MatLegacyFooterCell.ɵfac = /* @__PURE__ */function () {\n    let ɵMatLegacyFooterCell_BaseFactory;\n    return function MatLegacyFooterCell_Factory(t) {\n      return (ɵMatLegacyFooterCell_BaseFactory || (ɵMatLegacyFooterCell_BaseFactory = i0.ɵɵgetInheritedFactory(MatLegacyFooterCell)))(t || MatLegacyFooterCell);\n    };\n  }();\n  MatLegacyFooterCell.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatLegacyFooterCell,\n    selectors: [[\"mat-footer-cell\"], [\"td\", \"mat-footer-cell\", \"\"]],\n    hostAttrs: [\"role\", \"gridcell\", 1, \"mat-footer-cell\"],\n    features: [i0.ɵɵInheritDefinitionFeature]\n  });\n  return MatLegacyFooterCell;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Cell template container that adds the right classes and role.\n * @deprecated Use `MatCell` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nlet MatLegacyCell = /*#__PURE__*/(() => {\n  class MatLegacyCell extends CdkCell {}\n  MatLegacyCell.ɵfac = /* @__PURE__ */function () {\n    let ɵMatLegacyCell_BaseFactory;\n    return function MatLegacyCell_Factory(t) {\n      return (ɵMatLegacyCell_BaseFactory || (ɵMatLegacyCell_BaseFactory = i0.ɵɵgetInheritedFactory(MatLegacyCell)))(t || MatLegacyCell);\n    };\n  }();\n  MatLegacyCell.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatLegacyCell,\n    selectors: [[\"mat-cell\"], [\"td\", \"mat-cell\", \"\"]],\n    hostAttrs: [\"role\", \"gridcell\", 1, \"mat-cell\"],\n    features: [i0.ɵɵInheritDefinitionFeature]\n  });\n  return MatLegacyCell;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n * @deprecated Use `MatHeaderRowDef` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nlet MatLegacyHeaderRowDef = /*#__PURE__*/(() => {\n  class MatLegacyHeaderRowDef extends CdkHeaderRowDef {}\n  MatLegacyHeaderRowDef.ɵfac = /* @__PURE__ */function () {\n    let ɵMatLegacyHeaderRowDef_BaseFactory;\n    return function MatLegacyHeaderRowDef_Factory(t) {\n      return (ɵMatLegacyHeaderRowDef_BaseFactory || (ɵMatLegacyHeaderRowDef_BaseFactory = i0.ɵɵgetInheritedFactory(MatLegacyHeaderRowDef)))(t || MatLegacyHeaderRowDef);\n    };\n  }();\n  MatLegacyHeaderRowDef.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatLegacyHeaderRowDef,\n    selectors: [[\"\", \"matHeaderRowDef\", \"\"]],\n    inputs: {\n      columns: [\"matHeaderRowDef\", \"columns\"],\n      sticky: [\"matHeaderRowDefSticky\", \"sticky\"]\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkHeaderRowDef,\n      useExisting: MatLegacyHeaderRowDef\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n  return MatLegacyHeaderRowDef;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n * @deprecated Use `MatFooterRowDef` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nlet MatLegacyFooterRowDef = /*#__PURE__*/(() => {\n  class MatLegacyFooterRowDef extends CdkFooterRowDef {}\n  MatLegacyFooterRowDef.ɵfac = /* @__PURE__ */function () {\n    let ɵMatLegacyFooterRowDef_BaseFactory;\n    return function MatLegacyFooterRowDef_Factory(t) {\n      return (ɵMatLegacyFooterRowDef_BaseFactory || (ɵMatLegacyFooterRowDef_BaseFactory = i0.ɵɵgetInheritedFactory(MatLegacyFooterRowDef)))(t || MatLegacyFooterRowDef);\n    };\n  }();\n  MatLegacyFooterRowDef.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatLegacyFooterRowDef,\n    selectors: [[\"\", \"matFooterRowDef\", \"\"]],\n    inputs: {\n      columns: [\"matFooterRowDef\", \"columns\"],\n      sticky: [\"matFooterRowDefSticky\", \"sticky\"]\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkFooterRowDef,\n      useExisting: MatLegacyFooterRowDef\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n  return MatLegacyFooterRowDef;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n * @deprecated Use `MatRowDef` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nlet MatLegacyRowDef = /*#__PURE__*/(() => {\n  class MatLegacyRowDef extends CdkRowDef {}\n  MatLegacyRowDef.ɵfac = /* @__PURE__ */function () {\n    let ɵMatLegacyRowDef_BaseFactory;\n    return function MatLegacyRowDef_Factory(t) {\n      return (ɵMatLegacyRowDef_BaseFactory || (ɵMatLegacyRowDef_BaseFactory = i0.ɵɵgetInheritedFactory(MatLegacyRowDef)))(t || MatLegacyRowDef);\n    };\n  }();\n  MatLegacyRowDef.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatLegacyRowDef,\n    selectors: [[\"\", \"matRowDef\", \"\"]],\n    inputs: {\n      columns: [\"matRowDefColumns\", \"columns\"],\n      when: [\"matRowDefWhen\", \"when\"]\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkRowDef,\n      useExisting: MatLegacyRowDef\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n  return MatLegacyRowDef;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Header template container that contains the cell outlet. Adds the right class and role.\n * @deprecated Use `MatHeaderRow` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nlet MatLegacyHeaderRow = /*#__PURE__*/(() => {\n  class MatLegacyHeaderRow extends CdkHeaderRow {}\n  MatLegacyHeaderRow.ɵfac = /* @__PURE__ */function () {\n    let ɵMatLegacyHeaderRow_BaseFactory;\n    return function MatLegacyHeaderRow_Factory(t) {\n      return (ɵMatLegacyHeaderRow_BaseFactory || (ɵMatLegacyHeaderRow_BaseFactory = i0.ɵɵgetInheritedFactory(MatLegacyHeaderRow)))(t || MatLegacyHeaderRow);\n    };\n  }();\n  MatLegacyHeaderRow.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatLegacyHeaderRow,\n    selectors: [[\"mat-header-row\"], [\"tr\", \"mat-header-row\", \"\"]],\n    hostAttrs: [\"role\", \"row\", 1, \"mat-header-row\"],\n    exportAs: [\"matHeaderRow\"],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkHeaderRow,\n      useExisting: MatLegacyHeaderRow\n    }]), i0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 0,\n    consts: [[\"cdkCellOutlet\", \"\"]],\n    template: function MatLegacyHeaderRow_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementContainer(0, 0);\n      }\n    },\n    dependencies: [i1.CdkCellOutlet],\n    encapsulation: 2\n  });\n  return MatLegacyHeaderRow;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Footer template container that contains the cell outlet. Adds the right class and role.\n * @deprecated Use `MatFooterRow` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nlet MatLegacyFooterRow = /*#__PURE__*/(() => {\n  class MatLegacyFooterRow extends CdkFooterRow {}\n  MatLegacyFooterRow.ɵfac = /* @__PURE__ */function () {\n    let ɵMatLegacyFooterRow_BaseFactory;\n    return function MatLegacyFooterRow_Factory(t) {\n      return (ɵMatLegacyFooterRow_BaseFactory || (ɵMatLegacyFooterRow_BaseFactory = i0.ɵɵgetInheritedFactory(MatLegacyFooterRow)))(t || MatLegacyFooterRow);\n    };\n  }();\n  MatLegacyFooterRow.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatLegacyFooterRow,\n    selectors: [[\"mat-footer-row\"], [\"tr\", \"mat-footer-row\", \"\"]],\n    hostAttrs: [\"role\", \"row\", 1, \"mat-footer-row\"],\n    exportAs: [\"matFooterRow\"],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkFooterRow,\n      useExisting: MatLegacyFooterRow\n    }]), i0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 0,\n    consts: [[\"cdkCellOutlet\", \"\"]],\n    template: function MatLegacyFooterRow_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementContainer(0, 0);\n      }\n    },\n    dependencies: [i1.CdkCellOutlet],\n    encapsulation: 2\n  });\n  return MatLegacyFooterRow;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Data row template container that contains the cell outlet. Adds the right class and role.\n * @deprecated Use `MatRow` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nlet MatLegacyRow = /*#__PURE__*/(() => {\n  class MatLegacyRow extends CdkRow {}\n  MatLegacyRow.ɵfac = /* @__PURE__ */function () {\n    let ɵMatLegacyRow_BaseFactory;\n    return function MatLegacyRow_Factory(t) {\n      return (ɵMatLegacyRow_BaseFactory || (ɵMatLegacyRow_BaseFactory = i0.ɵɵgetInheritedFactory(MatLegacyRow)))(t || MatLegacyRow);\n    };\n  }();\n  MatLegacyRow.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatLegacyRow,\n    selectors: [[\"mat-row\"], [\"tr\", \"mat-row\", \"\"]],\n    hostAttrs: [\"role\", \"row\", 1, \"mat-row\"],\n    exportAs: [\"matRow\"],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkRow,\n      useExisting: MatLegacyRow\n    }]), i0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 0,\n    consts: [[\"cdkCellOutlet\", \"\"]],\n    template: function MatLegacyRow_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementContainer(0, 0);\n      }\n    },\n    dependencies: [i1.CdkCellOutlet],\n    encapsulation: 2\n  });\n  return MatLegacyRow;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Row that can be used to display a message when no data is shown in the table.\n * @deprecated Use `MatNoDataRow` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nlet MatLegacyNoDataRow = /*#__PURE__*/(() => {\n  class MatLegacyNoDataRow extends CdkNoDataRow {\n    constructor() {\n      super(...arguments);\n      this._contentClassName = 'mat-no-data-row';\n    }\n  }\n  MatLegacyNoDataRow.ɵfac = /* @__PURE__ */function () {\n    let ɵMatLegacyNoDataRow_BaseFactory;\n    return function MatLegacyNoDataRow_Factory(t) {\n      return (ɵMatLegacyNoDataRow_BaseFactory || (ɵMatLegacyNoDataRow_BaseFactory = i0.ɵɵgetInheritedFactory(MatLegacyNoDataRow)))(t || MatLegacyNoDataRow);\n    };\n  }();\n  MatLegacyNoDataRow.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatLegacyNoDataRow,\n    selectors: [[\"ng-template\", \"matNoDataRow\", \"\"]],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkNoDataRow,\n      useExisting: MatLegacyNoDataRow\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n  return MatLegacyNoDataRow;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n *\n * @deprecated Use `MatTextColumn` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nlet MatLegacyTextColumn = /*#__PURE__*/(() => {\n  class MatLegacyTextColumn extends CdkTextColumn {}\n  MatLegacyTextColumn.ɵfac = /* @__PURE__ */function () {\n    let ɵMatLegacyTextColumn_BaseFactory;\n    return function MatLegacyTextColumn_Factory(t) {\n      return (ɵMatLegacyTextColumn_BaseFactory || (ɵMatLegacyTextColumn_BaseFactory = i0.ɵɵgetInheritedFactory(MatLegacyTextColumn)))(t || MatLegacyTextColumn);\n    };\n  }();\n  MatLegacyTextColumn.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatLegacyTextColumn,\n    selectors: [[\"mat-text-column\"]],\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 3,\n    vars: 0,\n    consts: [[\"matColumnDef\", \"\"], [\"mat-header-cell\", \"\", 3, \"text-align\", 4, \"matHeaderCellDef\"], [\"mat-cell\", \"\", 3, \"text-align\", 4, \"matCellDef\"], [\"mat-header-cell\", \"\"], [\"mat-cell\", \"\"]],\n    template: function MatLegacyTextColumn_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementContainerStart(0, 0);\n        i0.ɵɵtemplate(1, MatLegacyTextColumn_th_1_Template, 2, 3, \"th\", 1);\n        i0.ɵɵtemplate(2, MatLegacyTextColumn_td_2_Template, 2, 3, \"td\", 2);\n        i0.ɵɵelementContainerEnd();\n      }\n    },\n    dependencies: [MatLegacyHeaderCellDef, MatLegacyColumnDef, MatLegacyCellDef, MatLegacyHeaderCell, MatLegacyCell],\n    encapsulation: 2\n  });\n  return MatLegacyTextColumn;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst EXPORTED_DECLARATIONS = [\n// Table\nMatLegacyTable, MatLegacyRecycleRows,\n// Template defs\nMatLegacyHeaderCellDef, MatLegacyHeaderRowDef, MatLegacyColumnDef, MatLegacyCellDef, MatLegacyRowDef, MatLegacyFooterCellDef, MatLegacyFooterRowDef,\n// Cell directives\nMatLegacyHeaderCell, MatLegacyCell, MatLegacyFooterCell,\n// Row directives\nMatLegacyHeaderRow, MatLegacyRow, MatLegacyFooterRow, MatLegacyNoDataRow, MatLegacyTextColumn];\n/**\n * @deprecated Use `MatTableModule` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nlet MatLegacyTableModule = /*#__PURE__*/(() => {\n  class MatLegacyTableModule {}\n  MatLegacyTableModule.ɵfac = function MatLegacyTableModule_Factory(t) {\n    return new (t || MatLegacyTableModule)();\n  };\n  MatLegacyTableModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: MatLegacyTableModule\n  });\n  MatLegacyTableModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [CdkTableModule, MatCommonModule, MatCommonModule]\n  });\n  return MatLegacyTableModule;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using paginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n *\n * **Note:** This class is meant to be a simple data source to help you get started. As such\n * it isn't equipped to handle some more advanced cases like robust i18n support or server-side\n * interactions. If your app needs to support more advanced use cases, consider implementing your\n * own `DataSource`.\n *\n * @deprecated Use `MatTableDataSource` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyTableDataSource extends _MatTableDataSource {}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatLegacyCell, MatLegacyCellDef, MatLegacyColumnDef, MatLegacyFooterCell, MatLegacyFooterCellDef, MatLegacyFooterRow, MatLegacyFooterRowDef, MatLegacyHeaderCell, MatLegacyHeaderCellDef, MatLegacyHeaderRow, MatLegacyHeaderRowDef, MatLegacyNoDataRow, MatLegacyRecycleRows, MatLegacyRow, MatLegacyRowDef, MatLegacyTable, MatLegacyTableDataSource, MatLegacyTableModule, MatLegacyTextColumn };\n//# sourceMappingURL=legacy-table.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}